<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphs</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        .search {
            display: flex;
            justify-content: center;
            justify-items: center;
            margin: 10px;
        }

        .text {
            border: black 1px solid;
            padding: 7px;
            border-radius: 10px;
        }
    </style>
</head>

<body style="padding-top: 15vh;">
    <div id="progressbar"></div>
    <div id="scrollpath"></div>
    <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light" id="ftco-navbar">
        <div class="container">
            <a class="navbar-brand" href="index.html">CORONAWATCH<small>247</small></a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav"
                aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>

            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav ml-auto">
                <li class="nav-item {{navItem1State}}"><a href="/" class="nav-link">Home</a></li>
                    <li class="nav-item {{navItem2State}}"><a href="tracker" class="nav-link">Live Tracker</a></li>
                    <li class="nav-item active {{navItem3State}}"><a class="nav-link" href="graphs">Graphs</a></li>
                    <li class="nav-item {{navItem4State}}"><a href="global" class="nav-link">Global</a></li>
                    <li class="nav-item {{navItem5State}}"><a class="nav-link" href="prevention">Prevention</a></li>
                    <li class="nav-item "><a href="future" class="nav-link">future</a></li>
                    <li class="nav-item "><a href="wiki" class="nav-link">Wiki</a></li>
                    <li class="nav-item {{navItem8State}}"><a href="news" class="nav-link">News</a></li>

                    <!-- <li class="nav-item cta"><a href="contact.html" class="nav-link"><span>Get started</span></a></li> -->
                </ul>
            </div>
        </div>
    </nav>
    {{!-- <div class="search"><input name="text" id="text" class="text" type="text" placeholder="Search Country.."></div> --}}

    <div class="cndiv"></div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script>
        alert('This Page Will Take Some Time To Render And It\'ll Use More CPU/GPU To Load Graphs')
        alert('If Graphs Is Not Being Displayed Properly Then Try Resizing Your Browser')
        let body = document.getElementsByTagName("div")[4];
        const makeid = (length) => {
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
        }
        const getData = (a) => {
            fetch('/corona/graphData')
                .then((rawData) => {
                    return rawData.json()
                })
                .then((d) => {
                    a(d)
                })
        }

        const generateChart = (chartID, xData, i) => {
            var ctx = document.getElementById(chartID).getContext('2d');
            let z = xData
            let a1 = []
            let b1 = []
            let c1 = []
            let d1 = []
            for (i = 0; i < z.length; i++) {
                a1.push(z[i].date)
                delete z[i].date
                b1.push(z[i].confirmed)
                delete z[i].confirmed
                c1.push(z[i].recovered)
                delete z[i].recovered
                d1.push(z[i].deaths)
                delete z[i].deaths
            }

            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: a1,
                    datasets: [{
                        label: 'Confirmed',
                        backgroundColor: 'rgba(188,80,144,.3)',
                        borderColor: 'rgba(255, 18, 158,.5)',
                        fillOpacity: .3,
                        data: b1
                    }, {
                        label: 'Recovered',
                        backgroundColor: 'rgba(76,175,80,.3)',
                        borderColor: 'rgba(48, 230, 56,.5)',
                        fillOpacity: .3,
                        data: c1
                    }, {
                        label: 'Deaths',
                        backgroundColor: 'rgba(255,99,97,.3)',
                        borderColor: 'rgba(255, 76, 74,.5)',
                        data: d1,
                        fillOpacity: .3
                    }]
                },
                options: { maintainAspectRatio: false }
            });
        }
        let cList
        (async () => {
            await getData(async (d) => {

                var result = Object.keys(d).map(function (key) {
                    return [Number(key), d[key]];
                });
                let countryNames = []
                let cn = Object.keys(d).forEach((v, i, a) => {
                    countryNames.push(v)
                })
                console.log(countryNames)
                cList = countryNames
                result.forEach((v, i, a) => {
                    let chartID = 'chart' + i
                    z = document.createElement("canvas")
                    z.id = chartID
                    z.width = "50%"
                    z.height = "200px"
                    cnm = document.createElement('h1')
                    cnm.id = countryNames[i]
                    cnm.innerHTML = countryNames[i]
                    zx = document.createElement('div')
                    zx.class = "canva-div"
                    body.append(zx)
                    zx.prepend(z)
                    zx.prepend(cnm)
                    generateChart(chartID, v[1], i)
                })
            })
        })()

        setTimeout(() => {
            bss = document.getElementsByTagName('canvas')
            for (i = 0; i < bss.length; i++) {
                bss[i].style.height = "300px"
                //bss[i].style.width = "90%"
                let progress = document.getElementById('progressbar')
                let totalHeight = document.body.scrollHeight - window.innerHeight
                window.onscroll = () => {
                    let progressHeight = (window.pageYOffset / totalHeight) * 100
                    progress.style.height = progressHeight + '%'
                }
            }
        }, 5000)
        window.onload = () => {
            let inpt = document.getElementById('text')
            let h1 = document.getElementsByTagName('h1')
            let cnvs = document.getElementsByClassName('cndiv')
            let aln = cnvs[0].childNodes
            console.log(cList)
            inpt.addEventListener('keyup', (d) => {
                console.log('called')
                if (cList.includes(d.target.value)) {
                    aln.forEach((v, k, p) => {
                        aln.forEach((v) => { console.log(v.style.display = "none") })
                    })
                }
            })
        }
    </script>

</body>


<footer class="ftco-footer ftco-bg-dark ftco-section">
    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center">
                <p>
                    Copyright &copy;
                    <script>document.write(new Date().getFullYear());</script> All rights reserved | This website is
                    developed with
                    ‚ù§ by <a href="https://t.me/anikethirpara" target="_blank">Team Codershub</a>
                </p>
            </div>
        </div>
    </div>
</footer>

</html>